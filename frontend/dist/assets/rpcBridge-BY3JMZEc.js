const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/event-DtSbnHQf.js","assets/core-DO-qNFU3.js"])))=>i.map(i=>d[i]);
import{_ as l}from"./index-BPJfKCK4.js";let w=!1;async function v(a){if(w)return;w=!0;const y=(a==null?void 0:a.heartbeatMs)??3e4,d=(a==null?void 0:a.maxBackoffMs)??1e4,n=typeof window<"u"?window:{};if(!!!(n&&(n.__IS_TAURI__||n.__TAURI__)))return;let r=500,i=null,s=null;const e=t=>{try{n.__BRIDGE_STATUS__=t}catch{}try{const h=new CustomEvent("bridge_status",{detail:{status:t}});window.dispatchEvent(h)}catch{}},{listen:o}=await l(async()=>{const{listen:t}=await import("./event-DtSbnHQf.js");return{listen:t}},__vite__mapDeps([0,1])),{invoke:_}=await l(async()=>{const{invoke:t}=await import("./core-DO-qNFU3.js");return{invoke:t}},[]),u=async()=>{try{e("connecting"),await _("start_event_bridge"),await _("bridge_set_subscribe",{enable:!0}),e("connected"),r=500}catch{e("error"),c()}},c=()=>{if(s)return;const t=Math.min(r,d);s=setTimeout(async()=>{s=null,r=Math.min(r*2,d),await u()},t)};try{await o("bridge_handshake",async()=>{e("connected"),r=500}),await o("bridge_disconnected",async()=>{e("disconnected"),c()}),await o("bridge_error",async()=>{e("error"),c()})}catch{}(()=>{i&&clearInterval(i),i=setInterval(async()=>{try{await _("rpc_call",{method:"snapshot",params:{}})}catch{e("error"),c()}},y)})(),await u()}export{v as startBridgeManager};
